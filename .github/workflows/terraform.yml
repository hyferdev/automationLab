# .github/workflows/terraform.yml
# This is the workflow file for Github Actions CI/CD.
# It triggers on pushes to main/dev/sandbox, pull requests, and manual runs.

name: 'Terraform CI/CD'

on:
  push:
    branches:
      - dev      # for dev deployments
      - main     # for prod deployments
      - sandbox  # for friend/collaborator deployments
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run the workflow against'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - main
        - sandbox

env:
  TF_LOG: INFO
  AWS_REGION: 'us-east-1'
  TF_WORKING_DIR: 'terraform'
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  # Determine workspace based on the trigger event
  TF_WORKSPACE: ${{ (github.event_name == 'workflow_dispatch' && format('automationLab-{0}', github.event.inputs.environment)) || (github.ref_name == 'main' && 'automationLab-prod' || (github.ref_name == 'dev' && 'automationLab-dev' || 'automationLab-sandbox')) }}

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      tf_environment: ${{ steps.get_env.outputs.ENVIRONMENT_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine Environment and Workspace
        id: get_env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "ENVIRONMENT_NAME=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "ENVIRONMENT_NAME=dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "sandbox" ]; then
            echo "ENVIRONMENT_NAME=sandbox" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/automationLab-Github
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -no-color -input=false -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.TF_WORKSPACE }}
          path: ${{ env.TF_WORKING_DIR }}/tfplan

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    # Run on push to specified branches OR on manual workflow_dispatch event
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sandbox')) || github.event_name == 'workflow_dispatch'
    environment: ${{ needs.terraform-plan.outputs.tf_environment }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/automationLab-Github
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ env.TF_WORKSPACE }}
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}
