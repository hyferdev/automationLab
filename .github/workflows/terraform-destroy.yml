# .github/workflows/terraform-destroy.yml
# This workflow manually triggers a terraform destroy for a specified environment.

name: 'Terraform Destroy'

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to destroy (dev, prod, or sandbox)'
        required: true
        type: choice
        options:
        - dev
        - prod
        - sandbox

env:
  TF_LOG: INFO
  AWS_REGION: 'us-east-1'
  TF_WORKING_DIR: 'terraform'
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  # Set the workspace based on the manual input
  TF_WORKSPACE: 'automationLab-${{ github.event.inputs.environment }}'

permissions:
  id-token: write
  contents: read

jobs:
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    # Use the GitHub Environment for any protection rules
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/automationLab-Github
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Destroy
        # Terraform Cloud will automatically load the correct variables for the workspace
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

